---

- name: "Merge defaults into existing {{ cloud_provider_name }} {{ cloud_resource_type }} resources."
  set_fact:
    cloud_resources_to_provision: "{{ cloud_resources_to_provision | default({}) | combine( { cloud_provider_name: { cloud_resource_type: { item.key: cloud_resource_definitions[cloud_resource_type] } } }, recursive=true ) | combine( { cloud_provider_name: { cloud_resource_type: { item.key: { 'options': cloud_resources[cloud_provider_name][cloud_resource_type][item.key] | combine({ 'instance_ids': [ cloud_facts.amazon.instances[item.key].id ] }, recursive=true) } } } }, recursive=true ) }}"
  with_dict: "{{ cloud_resource_items }}"
  when: item.value.state != 'present' and ( cloud_facts.amazon.instances is defined and cloud_facts.amazon.instances[item.key] is defined )
  loop_control:
    label: "{{ item.key }}"

- name: "Merge defaults into new {{ cloud_provider_name }} {{ cloud_resource_type }} resources."
  set_fact:
    # We set state to 'present', since this is a new instance. Other states,
    # like 'running', may attempt to act on a terminated instance, leading to
    # errors.
    cloud_resources_to_provision: "{{ cloud_resources_to_provision | default({}) | combine( { cloud_provider_name: { cloud_resource_type: { item.key: cloud_resource_definitions[cloud_resource_type] } } }, recursive=true ) | combine( { cloud_provider_name: { cloud_resource_type: { item.key: { 'options': cloud_resources[cloud_provider_name][cloud_resource_type][item.key] } } } }, recursive=true ) | combine( { cloud_provider_name: { cloud_resource_type: { item.key: { 'options': { 'state': 'present' } } } } }, recursive=true) }}"
  with_dict: "{{ cloud_resource_items }}"
  when: item.value.state != 'absent' and ( cloud_facts.amazon.instances is not defined or cloud_facts.amazon.instances[item.key] is not defined )
  loop_control:
    label: "{{ item.key }}"

- name: Find user's public key to allow root SSH login.
  set_fact:
    my_ssh_pub_key: "{{ lookup('file', item) }}"
  with_first_found:
    - files:
      - '~/.ssh/id_rsa.pub'
      skip: true
  register: found_my_pub_key

- name: Notify if public key cannot be found.
  fail:
    msg: Could not find a public key at '~/.ssh/id_rsa.pub'. Please generate one by running 'ssh-keygen'.
  when: found_my_pub_key.skipped is defined

- name: Compile list of regions in which to launch EC2 instances.
  set_fact:
    deploy_key_ec2_regions: "{{ deploy_key_ec2_regions | default([]) | union([ item.value.options.region ]) }}"
  with_dict: "{{ cloud_resources_to_provision[cloud_provider_name][cloud_resource_type] }}"

- name: Ensure that an EC2 deployment key is defined for the current user.
  ec2_key:
    name: "{{ lookup('env','USER') }}" # the current user
    key_material: "{{ my_ssh_pub_key }}"
    region: "{{ item }}"
    state: present
    wait: yes
  connection: local
  with_items: "{{ deploy_key_ec2_regions }}"

